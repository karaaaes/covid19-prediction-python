# -*- coding: utf-8 -*-
"""Project Prediksi Covid-19

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/120KalVKL6JZ9r33B6IQiCmlS33sPSLQh
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

!pip install -U -q PyDrive
 
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
 
 
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

link = 'https://drive.google.com/file/d/1q4MSpRyH5KIQieEZUXSlkcWaVQHRaho1/view?usp=share_link'
 
# to get the id part of the file
id = link.split("/")[-2]
 
downloaded = drive.CreateFile({'id':id})
downloaded.GetContentFile('covid-data-2020.csv') 
 
df = pd.read_csv('covid-data-2020.csv')

df

df.shape

print(df['location'].value_counts())

##DATA CLEANSING
df_ina = df.loc[df['location'] == "Indonesia"]

#digunakan untuk mereset index data menjadi nomor 0
df_ina = df_ina.reset_index(drop=True)

#menampilkan 5 data teratas
df_ina.head()

#pengecekan total record pada data
df_ina.shape

#pengecekan kolom yang terdapat pada data
df_ina.columns

#mengambil beberapa data yang diperlukan untuk analisis
final_df_ina = df_ina[["date", "total_cases", "new_cases", "total_deaths", "new_deaths"]]

final_df_ina

#cleaning data yang memiliki records NaN agar data yang dihasilkan tidak bias.
final_df_ina = final_df_ina.fillna(0)

#data setelah cleaning
final_df_ina

final_df_ina.isnull().sum()

final_df_ina["new_cases"].plot(label = "Kasus Baru")
final_df_ina["new_deaths"].plot(label = "Kasus Kematian")
plt.xlabel("Kasus hari ke-")
plt.ylabel("Jumlah kasus")
plt.legend(loc="best")
plt.show()

#mencari puncak kasus pada data yang ada
for i in range(len(final_df_ina)):
  if final_df_ina['new_cases'].iloc[i] == final_df_ina['new_cases'].max():
    print("Tanggal kasus positif tertinggi {}". format(final_df_ina['date'].iloc[i]))
    print("Dengan jumlah {}".format(final_df_ina['new_cases'].iloc[i]))

final_df_ina['total_cases'].plot(label = "Positif")
final_df_ina['total_deaths'].plot(label = "Kematian")
plt.xlabel("Hari ke-")
plt.ylabel("Jumlah kasus kumulatif perhari")
plt.legend(loc="best")
plt.show

#Original Sigmoid
$$sig(t)=\frac{1}{1+e^(-t)}$$

puncak = 8
x = np.linspace(-8,8,100)
y=puncak/(1+np.exp(-x))
plt.plot(x,y, label = "Sigmoid")
plt.grid()
plt.show()

#Saturasi merupakan angka tidak lagi mengalami pertambahan dimana itu terjadi pada x = 6 hingga x = 8
#Saturasi adalah titik puncak 
#Proses ekponensial merupakan titik penambahan tertinggi dimana dimulai dari x = -4 hingga x = 4
#Jika dilihat dari data yang ada, belum menunjukkan grafik saturasi dimana hal ini masih dapat terjadi proses peningkatan kasus

#Deklarasi fungsi kurva sigmoid
def kurva_sigmoid(t,a,t0,c):
  return c/(1+np.exp(-(t-t0)/(a)))

#Menentukan Index
x = list(final_df_ina.index)
y = list(final_df_ina['total_cases'])

from scipy.optimize import curve_fit, fsolve

#fit membutuhkan inputan dari kurva, x = jumlah semua records di data, y = total kumulatif, dan method trf as default
fit=curve_fit(kurva_sigmoid, x, y, method='trf')

#Memberikan 2 nilai untuk fit karena membutuhkan 2 variabel (x dan y)
varA, varB=fit

varA

varB

#Memperoleh standar nilai error dari varB dengan standar diagonal dari varA
std_er = np.zeros(len(varA))
for i in range(len(varA)):
  std_er[i] = np.sqrt(varB[i][i])

std_er

#mengisikan nilai prediksi dengan menggabungkan varA dengan standar Error
a = varA[0]+std_er[0]
t0 = varA[1]+std_er[1]
c = varA[2]+std_er[2]

#fungsi prediksi nilai puncak
def puncak(x):
  return kurva_sigmoid(x,a,t0,c) - int(c)

#inisialisasi dengan menggunakan fsolve
n_puncak = int(fsolve(puncak,t0))

print("Hari Puncak Adalah "+str(n_puncak))

#Memprediksi range hari sebelum menuju puncak
n_0 = max(x)+1
pred_x = list(range(n_0,n_puncak))

print("Kita memiliki {} hari lagi hingga mencapai hari puncak".format(str(len(pred_x))))

#Menentukan
pred_y = np.zeros(len(x+pred_x))

for i in range(n_puncak):
  pred_y[i] = kurva_sigmoid(i,a,t0,c)

print("Prediksi jumlah puncak berjumlah {} orang".format(int(pred_y[-1])))

plt.plot(x+pred_x, pred_y, label = "Prediksi")
plt.scatter(x,y,label = "Data asli", s=10, color="Red")
plt.xlabel("Hari Ke-")
plt.ylabel("Jumlah kumulatif kasus positif")
plt.grid()
plt.legend(loc = "best")
plt.show()

#Fungsi menghitung akurasi sesuai dengan nilai prediksi
def akurasi_r2(y_asli, y_prediksi, x):
  atas = sum((y_asli-y_prediksi[0:len(x)])**2)
  bawah = sum((y_asli-np.mean(y))**2)
  r = 1-atas/bawah
  return r

#Menghitung nilai akurasi
akurasi = akurasi_r2(y, pred_y, x)
akurasi*100

#Menambahkan package time, mencari tau tanggal hari akhir dari pandemi

from datetime import datetime, timedelta

final_df_ina

n1 = final_df_ina['date'][0]
tgl_0 = datetime.strptime(n1,'%Y-%m-%d')
print(tgl_0)

tgl_puncak = tgl_0+timedelta(days=n_puncak)
print(tgl_puncak)

